import numpy as np
import matplotlib.pyplot as plt
import tifffile
import gc
# import sys
# import os
# from tkinter import *
# from tkinter import filedialog
# from cellpose import denoise#, utils, io
import cv2
import matplotlib
matplotlib.use("Qt5Agg")


"""
2025/03/13, written right after receiving phone call at 08:27 from Morosawa.

This phone call included, but was not only limited to, the following statements from Morosawa: 
"... we're doing business here, santec has no resource for you to research."
"... if you don't want to do it, I'll remove you from this project and find someone else."
"... it's ok if you don't want do it, just give out the data, I'll find someone else to make the graph."

This conversation makes me feel uncomfortable and disgusted with santec particularlly with Morosawa, about 
their so-called "business" style of misleading customers and fabricating graph on purpose. 
NO ONE should put any trust in the promise and description made by santec managers, as doing so 
poses a significant risk and may be detrimental to one's own business interests.
*
This code is made specifically from Morosawa's request, to generate graph of comparing OCT vs NC200 in 
'viability' assay. 
* 
NOTE: the data (Jurkat cell, 2024/07/31) was measured with unstable galvo, therefore any quantification is 
100% irresponsible and unreliable; the raw data was even lost in an HDD blackout accident. 
Update 2025/03/14: Although getting warned by me multiple times in emails and teams chat that THIS DATA WAS NOT 
REPRODUCIBLE due to the galvo issue, Morosawa insisted threatening me to provide such a graph from that data to 
mislead Bayer to invest. Alan even asked me to make more plots based on it. This is a bitch company run by liars. 

*** NO QUANTIFICATION IS RELIABLE ! ! ! ***
I hereby declare: the result has ZERO scientific value for sharing and discussing, NO ONE SHOULD DRAW ANY 
CONCLUSION OUT OF IT. 
Any action of using this graph to persuade investors / collaborators / customers / researchers is recognized 
as severe TREATING, and anyone doing so should NEVER BE TRUSTED in aspects of BUSINESS REPUTATION and 
SCIENTIFIC MORALITY.
* 
All code below is generated by ChatGPT directly following the request of Morosawa. I hold no responsibility 
of fabricating, spreading, and treating using any FAKE/NON-REPRODUCIBLE DATA. 


"""



dead_threshold_0 = 0.27
live_threshold_0 = 0.2

def count_red_green_pixels(image_path, hue_threshold):
    img = cv2.imread(image_path)
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    hue, sat, val = hsv[:, :, 0], hsv[:, :, 1], hsv[:, :, 2]
    red_mask = (hue < hue_threshold*150) & (val > 20)
    green_mask = (hue > hue_threshold*150) & (val > 20)
    red_count = np.sum(red_mask)
    green_count = np.sum(green_mask)
    green_percentage = green_count / (red_count + green_count)
    # print(f"Red pixels: {red_count}")
    # print(f"Green pixels: {green_count}")
    # print(f"Green pixel percentage is: {green_percentage}")
    return green_percentage * 100


control_0 = r"C:\Users\lzhu\Desktop\tmp\control0.png"
control_1 = r"C:\Users\lzhu\Desktop\tmp\control1.png"
control_2 = r"C:\Users\lzhu\Desktop\tmp\control2.png"
control_3 = r"C:\Users\lzhu\Desktop\tmp\control3.png"
control_4 = r"C:\Users\lzhu\Desktop\tmp\control4.png"
control_18 = r"C:\Users\lzhu\Desktop\tmp\control18.png"
control_19 = r"C:\Users\lzhu\Desktop\tmp\control19.png"
control_20 = r"C:\Users\lzhu\Desktop\tmp\control20.png"
control_21 = r"C:\Users\lzhu\Desktop\tmp\control21.png"
control_22 = r"C:\Users\lzhu\Desktop\tmp\control22.png"

oxydol_0 = r"C:\Users\lzhu\Desktop\tmp\oxydol0.png"
oxydol_1 = r"C:\Users\lzhu\Desktop\tmp\oxydol1.png"
oxydol_2 = r"C:\Users\lzhu\Desktop\tmp\oxydol2.png"
oxydol_3 = r"C:\Users\lzhu\Desktop\tmp\oxydol3.png"
oxydol_4 = r"C:\Users\lzhu\Desktop\tmp\oxydol4.png"
oxydol_18 = r"C:\Users\lzhu\Desktop\tmp\oxydol18.png"
oxydol_19 = r"C:\Users\lzhu\Desktop\tmp\oxydol19.png"
oxydol_20 = r"C:\Users\lzhu\Desktop\tmp\oxydol20.png"
oxydol_21 = r"C:\Users\lzhu\Desktop\tmp\oxydol21.png"
oxydol_22 = r"C:\Users\lzhu\Desktop\tmp\oxydol22.png"

control = [control_0,control_1,control_2,control_3,control_4,control_18,control_19,control_20,control_21,control_22]
oxydol = [oxydol_0,oxydol_1,oxydol_2,oxydol_3,oxydol_4,oxydol_18,oxydol_19,oxydol_20,oxydol_21,oxydol_22]



mu, sigma = dead_threshold_0, dead_threshold_0*0.1
dead_threshold_list = np.random.normal(mu, sigma, 100)
mu, sigma = live_threshold_0, live_threshold_0*0.1
live_threshold_list = np.random.normal(mu, sigma, 100)
control_rec = np.ones([len(live_threshold_list), 10])
oxydol_rec = np.ones([len(dead_threshold_list), 10])
# control_rec = np.ones([11, 10])
# oxydol_rec = np.ones([11, 10])
for loop in range(len(live_threshold_list)):
    dead_threshold = dead_threshold_list[loop]
    live_threshold = live_threshold_list[loop]
    # dead_threshold = dead_threshold_0 * (1 + (loop-5)/50)
    # live_threshold = live_threshold_0 * (1 + (loop - 5) / 50)

    control[0] = count_red_green_pixels(control_0, live_threshold)
    control[1] = count_red_green_pixels(control_1, live_threshold)
    control[2] = count_red_green_pixels(control_2, live_threshold)
    control[3] = count_red_green_pixels(control_3, live_threshold)
    control[4] = count_red_green_pixels(control_4, live_threshold)
    control[5] = count_red_green_pixels(control_18, live_threshold)
    control[6] = count_red_green_pixels(control_19, live_threshold)
    control[7] = count_red_green_pixels(control_20, live_threshold)
    control[8] = count_red_green_pixels(control_21, live_threshold)
    control[9] = count_red_green_pixels(control_22, live_threshold)

    oxydol[0] = count_red_green_pixels(oxydol_0, dead_threshold)
    oxydol[1] = count_red_green_pixels(oxydol_1, dead_threshold)
    oxydol[2] = count_red_green_pixels(oxydol_2, dead_threshold)
    oxydol[3] = count_red_green_pixels(oxydol_3, dead_threshold)
    oxydol[4] = count_red_green_pixels(oxydol_4, dead_threshold)
    oxydol[5] = count_red_green_pixels(oxydol_18, dead_threshold)
    oxydol[6] = count_red_green_pixels(oxydol_19, dead_threshold)
    oxydol[7] = count_red_green_pixels(oxydol_20, dead_threshold)
    oxydol[8] = count_red_green_pixels(oxydol_21, dead_threshold)
    oxydol[9] = count_red_green_pixels(oxydol_22, dead_threshold)

    # print(f"Live: {control}")
    # print(f"Dead: {oxydol}")
    #
    # ###
    # control_nc = [91.9, 92.2, 80.1, 90.8, 90.1, 83.5, 78.9, 75.6, 81.8, 79.1]
    # oxydol_nc = [90.3, 70, 55.6, 47.8, 50, 3.2, 3.4, 2.4, 3.8, 3.4]
    # ###
    #
    # fig1 = plt.figure(10, figsize=(10, 6));  plt.clf()
    # ax = fig1.subplot_mosaic("a")
    #
    # x = np.linspace(0, 9, 10)
    # ax_a1 = ax['a'].plot(x[0:5], control[0:5], color='#69D46C', marker='*', linestyle='--', markersize=10)
    # ax_a2 = ax['a'].plot(x[5:10], control[5:10], color='#69D46C', marker='*', linestyle='--', markersize=10)
    # ax_b1 = ax['a'].plot(x[0:5], oxydol[0:5], color='#FFA8BA', marker='*', linestyle='--', markersize=10)
    # ax_b2 = ax['a'].plot(x[5:10], oxydol[5:10], color='#FFA8BA', marker='*', linestyle='--', markersize=10)
    #
    #
    # ax_c1 = ax['a'].plot(x[0:5], control_nc[0:5], color='#24B029', marker='o', linestyle='-', markersize=10)
    # ax_c2 = ax['a'].plot(x[5:10], control_nc[5:10], color='#24B029', marker='o', linestyle='-', markersize=10)
    # ax_c1 = ax['a'].plot(x[0:5], oxydol_nc[0:5], color='#FF6E8B', marker='o', linestyle='-', markersize=10)
    # ax_c2 = ax['a'].plot(x[5:10], oxydol_nc[5:10], color='#FF6E8B', marker='o', linestyle='-', markersize=10)
    #
    #
    # ax['a'].set_yticks(np.arange(0, 110, 10))
    # ax['a'].set_ylim([-0.01, 100])
    # ax['a'].set_xticks([0, 1, 2, 3, 4, 5,6,7,8,9],["0", "1", "2", "3", "4","18","19","20","21","22"])
    # ax['a'].yaxis.grid()

    control_rec[loop, :] = control
    oxydol_rec[loop, :] = oxydol
    # print(loop)

print(np.std(control_rec, axis=0))
print(np.std(oxydol_rec, axis=0))
# print(np.max(control_rec, axis=0) - np.min(control_rec, axis=0))
# print(np.max(oxydol_rec, axis=0) - np.min(oxydol_rec, axis=0))